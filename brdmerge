local boards = require 'boards'

local files = {}

local offset = { x = 0, y = 0 }

local args = {...}
local i = 1
while i <= #args do
	local arg = args[i]
	if arg=='-offset' then
		i = i + 1
		assert(i <= #args, "-offset need an argument")
		assert(args[i]:match('^([+-])([%d.]+)(%w*)([+-])([%d.]+)(%w*)$'), "invalid offset")
		local x,y = boards.parse_distances(args[i])
		offset = { x = x, y = y }
	elseif arg:match('^%-') then
		error("unknown option "..arg)
	else
		table.insert(files, {filename=arg, scale=scale, offset=offset})
	end
	i = i + 1
end

local output = files[#files].filename
files[#files] = nil

-- load files
for _,file in ipairs(files) do
	print("loading "..file.filename)
	file.board = boards.offset(assert(boards.load(file.filename, {keep_outlines_in_images=true})), file.offset.x, file.offset.y)
end

-- merge files
local merged = files[1].board
for i=2,#files do
	merged = boards.merge(merged, files[i].board)
end

-- merge apertures
boards.merge_apertures(merged)

-- save output file
assert(boards.save(merged, output))

-- vi: ft=lua
