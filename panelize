local gerber = require 'gerber'

local cfgfile = ...
assert(cfgfile)

------------------------------------------------------------------------------

local function grbextents(filename)
	local extents = assert(assert(io.popen('grbinfo -extents '..filename, 'rb')):read('*all'))
	extents = extents:gsub('\r', '')
	local minx,maxx = extents:match('\nX:\t(%S*)\t(%S*)\n')
	local miny,maxy = extents:match('\nY:\t(%S*)\t(%S*)\n')
	assert(minx and maxx and miny and maxy)
	return { left=minx, width=maxx-minx, bottom=miny, height=maxy-miny }
end

------------------------------------------------------------------------------

print("loading config")

local config = {}

local chunk = assert(loadfile(cfgfile))
setfenv(chunk, config)
chunk()
assert(config.images[config.outline] == 'gerber')

local boards = {}
for _,row in ipairs(config.panel) do
	for _,board in ipairs(row) do
		boards[board] = true
	end
end

local extents = {}

for board in pairs(boards) do
	extents[board] = grbextents(config.directory..board..'.'..config.outline)
end

for _,row in ipairs(config.panel) do
	local minh = 0
	for _,board in ipairs(row) do
		minh = math.max(minh, extents[board].height)
	end
	row.height = minh
end

local panel = { left = 0, bottom = 0, width = 0 }
do
	local y = 0
	for _,row in ipairs(config.panel) do
		local x = 0
		for _,board in ipairs(row) do
			x = x + extents[board].width + config.spacing
		end
		panel.width = math.max(panel.width, x - config.spacing)
		y = y + row.height + config.spacing
	end
	panel.height = y - config.spacing
end

local function round(n, d)
	local f = 10^d
	return math.floor(n * f + 0.5) / f
end

if config.vscore then
	print("generating vscore file")
	local data = {}
	local format = gerber.format('L', 2, 4)
	local d = format.decimal
	table.insert(data, format)
	table.insert(data, gerber.parameter('OF', 'A0B0'))
	table.insert(data, gerber.parameter('IP', 'POS'))
	table.insert(data, gerber.parameter('LP', 'D'))
--	table.insert(data, gerber.aperture(10, 'R', {round(config.spacing, d), round(config.spacing, d)}))
	table.insert(data, gerber.aperture(10, 'C', {round(config.spacing, d)}))
	table.insert(data, gerber.directive{D=10})
	
	-- generate some lines between the boards
	local y = -config.spacing / 2
	for j,row in ipairs(config.panel) do
		local x = -config.spacing / 2
		local y1 = y + row.height + config.spacing
		for i,board in ipairs(row) do
			x = x + extents[board].width + config.spacing
			if x < panel.width + config.spacing / 2 then
				if j == 1 then
					local ox = round(x, d)
					local oy0 = round(y + config.spacing / 2, d)
					local oy1 = round(y1, d)
					table.insert(data, gerber.directive({X=ox, Y=oy0, D=2}, format))
					table.insert(data, gerber.directive({X=ox, Y=oy1, D=1}, format))
				elseif j == #config.panel then
					local ox = round(x, d)
					local oy0 = round(y, d)
					local oy1 = round(y1 - config.spacing / 2, d)
					table.insert(data, gerber.directive({X=ox, Y=oy0, D=2}, format))
					table.insert(data, gerber.directive({X=ox, Y=oy1, D=1}, format))
				else
					local ox = round(x, d)
					local oy0 = round(y, d)
					local oy1 = round(y1, d)
					table.insert(data, gerber.directive({X=ox, Y=oy0, D=2}, format))
					table.insert(data, gerber.directive({X=ox, Y=oy1, D=1}, format))
				end
			end
		end
		y = y1
		if j < #config.panel then
			local ox0 = round(config.spacing / 2, d)
			local ox1 = round(panel.width - config.spacing / 2, d)
			local oy = round(y, d)
			table.insert(data, gerber.directive({X=ox0, Y=oy, D=2}, format))
			table.insert(data, gerber.directive({X=ox1, Y=oy, D=1}, format))
		end
	end
	
	table.insert(data, gerber.eof())
	gerber.save(data, config.directory..config.output..".vscore")
end

local commands = {
	gerber = "grbmerge",
	excellon = "drlmerge",
}
for extension,format in pairs(config.images) do
	local command = commands[format]
	
	local y = 0
	for _,row in ipairs(config.panel) do
		local x = 0
		for _,board in ipairs(row) do
			local ox = math.floor((x - extents[board].left) * 1e4 + 0.5) * 1e-4
			local oy = math.floor((y - extents[board].bottom) * 1e4 + 0.5) * 1e-4
			command = command..string.format(" -offset %+f%+f %s", ox, oy, config.directory..board.."."..extension)
			x = x + extents[board].width + config.spacing
		end
		y = y + row.height + config.spacing
	end
	
	if config.vscore and config.vscore[extension] then
		command = command.." -offset +0+0 "..config.directory..config.output..".vscore"
	end
	
	print("generating "..config.output.."."..extension)
	command = command.." "..config.directory..config.output.."."..extension
	
	os.execute(command)
end

-- vi: ft=lua
